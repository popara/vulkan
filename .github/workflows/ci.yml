name: Haskell CI

on:
  push:
    branches: [ master ]
  pull_request:

jobs:
  cabal:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        ghc: ['8.10.1', '8.8.4', '8.6.5']
        cabal: ['3.0']
        os: [ubuntu-20.04, macOS-latest]
        exclude:
          - ghc: 8.10.1
            os: macOS-latest
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - uses: actions/setup-haskell@v1
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}

    - name: Cache cabal store
      uses: actions/cache@v1
      with:
        path: ~/.cabal
        key: ${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/cabal.project') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.ghc }}-
          ${{ runner.os }}-

    - name: Cache dist-newstyle
      uses: actions/cache@v1
      with:
        path: dist-newstyle
        key: ${{ runner.os }}-${{ matrix.ghc }}-dist-newstyle

    - name: Install system dependencies Linux
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install libvulkan-dev glslang-tools libsdl2-dev

    - name: Install system dependencies macOS
      if: matrix.os == 'macOS-latest'
      shell: bash
      run: |
        brew install pkg-config sdl2
        brew tap apenngrace/homebrew-vulkan 
        brew cask install vulkan-sdk

    - name: Remove examples for 8.6.5
      run: |
        sed -ibak '/examples/d' cabal.project
      if: matrix.ghc == '8.6.5'

    - name: Remove generator for all but 8.8.4
      run: |
        sed -ibak '/generate-new/d' cabal.project
      if: matrix.ghc != '8.8.4'

    - run: cabal update

    - run: cabal configure -fgeneric-instances

    - name: Install dependencies
      run: cabal build --only-dependencies --enable-tests --enable-benchmarks all

    - name: Build vulkan
      run: cabal build --enable-tests --enable-benchmarks vulkan

    - name: Build VulkanMemoryAllocator
      run: cabal build --enable-tests --enable-benchmarks VulkanMemoryAllocator

    - name: Build vulkan-utils
      run: cabal build --enable-tests --enable-benchmarks vulkan-utils

    - name: Build vulkan-examples
      run: cabal build --enable-tests --enable-benchmarks vulkan-examples
      if: matrix.ghc != '8.6.5'

    - name: Build documentation
      run: |
        cabal haddock
        cabal haddock VulkanMemoryAllocator

  stack:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-20.04, macOS-latest, windows-latest]
        stack-args: ['--system-ghc --flag vulkan:generic-instances --flag VulkanMemoryAllocator:generic-instances']
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - uses: actions/setup-haskell@v1
      with:
        stack-version: 'latest'
        enable-stack: true
        ghc-version: '8.8.4'

    - name: Cache stack global package db
      id:   stack-global
      uses: actions/cache@v1
      with:
        path: ~/.stack
        key: ${{ runner.os }}-stack-global-${{ matrix.stack-args }}-${{ hashFiles('**.yaml') }}
        restore-keys: |
          ${{ runner.os }}-stack-global-${{ matrix.stack-args }}
          ${{ runner.os }}-stack-global

    - name: Cache .stack-work
      id: stack-work
      uses: actions/cache@v1
      with:
        path: .stack-work
        key: ${{ runner.os }}-stack-work-${{ matrix.stack-args }}-${{ hashFiles('**.yaml') }}
        restore-keys: |
          ${{ runner.os }}-stack-work-${{ matrix.stack-args }}
          ${{ runner.os }}-stack-work

    - name: Install system dependencies Linux
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install libvulkan-dev glslang-tools libsdl2-dev

    - name: Install system dependencies Windows
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        stack exec $ARGS -- pacman --noconfirm -S mingw-w64-x86_64-vulkan mingw-w64-x86_64-pkg-config mingw-w64-x86_64-SDL2 mingw-w64-x86_64-glslang
      env:
        ARGS: ${{ matrix.args }}

    - name: Install system dependencies macOS
      if: matrix.os == 'macOS-latest'
      shell: bash
      run: |
        brew install pkg-config sdl2
        brew tap apenngrace/homebrew-vulkan 
        brew cask install vulkan-sdk

    - name: Install dependencies
      run: stack build --test --bench --only-dependencies $ARGS
      env:
        ARGS: ${{ matrix.stack-args }}

    - name: Build
      run: stack build $ARGS
      env:
        ARGS: ${{ matrix.stack-args }}

    - name: Build documentation
      run: stack haddock $ARGS
      env:
        ARGS: ${{ matrix.stack-args }}

  nix:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - uses: cachix/install-nix-action@v8
    - uses: cachix/cachix-action@v6
      with:
        name: vulkan-haskell
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'

    - run: nix-build -A generate-new
    - run: nix-build -A vulkan
    - run: nix-build -A VulkanMemoryAllocator
    - run: nix-build -A vulkan-utils
    - run: nix-build -A vulkan-examples
